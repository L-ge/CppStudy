笔记：
一、基础
1、C++定义了一元运算符和二元运算符。作用于一个运算对象的运算符是一元运算符，以此类推。
2、在表达式求值的过程中，运算对象常常由一种类型转换成另外一种类型。例如，尽管一般的二元运算符都要求两个运算对象的类型相同，但是很多时候即使运算对象的类型不相同也没有关系，只要它们能被转换成同一种类型即可。
小整数类型(如bool、char、short等)通常会被提升成较大的整数类型，主要是int。

3、当运算符作用于类类型的运算对象时，用户可以自行定义其含义。因为这种自定义的过程事实上是为已存在的运算符赋予了另外一层定义，所以称之为重载运算符。
我们使用重载运算符时，其包括运算对象的类型和返回值的类型，都是由该运算符定义的；但是运算对象的个数、运算符的优先级和结合律都是无法改变的。

4、C++的表达式要不然是右值，要不然就是左值。
一个左值表达式的求值结果是一个对象或者一个函数，然而以常量对象为代表的某些左值实际上不能作为赋值语句的左侧运算对象。
一个对象被用作右值的时候，用的是对象的值(内容)；当对象被用作左值的时候，用的是对象的身份(在内存中的位置)。
一个重要的原则是在需要右值的地方可以用左值来代替，但是不能把右值当成左值(也就是位置)使用。当一个左值被当成右值使用时，实际使用的是它的内容(值)。

5、使用关键字decltype的时候，左值和右值也有所不同。如果表达式的求值结果是左值，decltype作用于该表达式(不是变量)得到一个引用类型。例如，假定p的类型是int*，因为解引用运算符生成左值，所以decltype(*p)的结果是int&。另一方面，因为取地址运算符生成右值，所以decltype(&p)的结果是int**，也就是说，结果是一个指向整型指针的指针。

6、算术运算符满足左结合律，意味着如果运算符的优先级相同，将按照从左向右的顺序组合运算对象。

7、括号无视优先级与结合律。

8、C++ Primer 5e第147页罗列出了全部的运算符，并用双横线将它们分割成若干组。同一组内的运算符优先级相同，组的位置越靠前组内的运算符优先级越高。

9、下面的输出表达式是未定义的：
int i = 0;
cout << i << " " << ++i << endl;

10、运算对象的求值顺序与优先级和结合律无关，在一条形如f()+g()*h()+j()的表达式中，对于这些函数的调用顺序没有明确规定。如果f、g、h和j是无关函数，它们既不会改变同一对象的状态也不执行IO任务，那么函数的调用顺序不受限制。反之，如果其中某几个函数影响同一对象，则它是一条错误的表达式，将产生未定义的行为。

二、算术运算符


三、逻辑和关系运算符


四、赋值运算符


五、递增和递减运算符


六、成员访问运算符

七、条件运算符

八、位运算符

九、sizeof运算符

十、逗号运算符

十一、类型转换

十二、运算符优先级表


一些术语：
1、


