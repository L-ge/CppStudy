笔记：
1、在大多数系统中，main的返回值被用来指示状态。返回值0表明成功，非0的返回值的含义由系统定义，通常用来指出错误类型。
2、不同编译器使用不同的后缀命名约定，最常见的包括.cc、.cxx、.cpp、.cp及.C。
3、编译器生成一个可执行文件。Windows系统会将这个可执行文件命名为xxx.exe。Unix系统中的编译器通常将可执行文件命名为a.out。
4、标准库还定义了其他两个ostream类型对象，名为cerr和clog(发音分别为see-err和see-log)。我们通常用cerr来输出警告和错误信息，因此它也被称为标准错误。而clog用来输出程序运行时的一般性信息。
5、每个使用标准库设施的程序都必须包含相关的头文件。
6、语句"std::cout << std::endl;"中，写入endl的效果是结束当行，并将与设备关联的缓冲区(buffer)中的内容刷到设备中。
缓冲刷新操作可以保证到目前为止程序所产生所有输出都真正写入输出流中，而不是仅停留在内存中等待写入流。
注意：程序员常常在调试时添加打印语句。这类语句应该保证“一直”刷新流。否则，如果程序崩溃，输出可能还留在缓冲区，从而导致关于程序崩溃位置的错误判断。
7、命名空间可以帮助我们避免不经意的名字定义冲突，以及使用库中相同名字导致的冲突。标准库定义的所有的名字都在命名空间std中。
8、初始化一个变量，就是在变量创建的同时为它赋予一个值。
9、编译器会忽略注释，因此注释对程序的行为或者性能不会有任何影响。
10、当从键盘向程序输入数据时，对于如何指出文件结束，不同操作系统有不同的约定。在Windows系统中，输入文件结束符的方法是敲Ctrl+Z，然后按Enter或Return键。在Unix系统中，包括Mac OS X系统中，文件结束符输入是用Ctrl+D。
11、C++程序中的每个名字都要先声明后使用。
12、一个单个错误常常会具有传递效应，导致编译器其后报告比实际数量多得多的错误信息。一个好习惯就是在每修正一个错误后就立即重新编译代码，或者最多是修正了一小部分明显的错误后就重新编译。这就是所谓的"编辑-编译-调试"周期。
13、C++用=进行赋值，用==作为相等运算符。两个运算符都可以出现在条件中。一个常见的错误是想在条件中使用==(相等判断)，却误用了=。所以建议用"if(3 == nCnt)",而不是用"if(nCnt == 3)"。
14、包含来自标准库的头文件时，应该用尖括号(< >)包围头文件名。对于不属于标准库的头文件，则用双引号(" ")包围。
15、文件重定向？？
16、点运算符只能用于类类型的对象。


一些术语：
1、缓存区(buffer)：
一个存储区域，用于保存数据。IO设施通常将输入(或输出)数据保存在一个缓冲区中，读写缓冲区的动作与程序中的动作是无关的。我们可以显式地刷新输出缓冲，以便强制将缓冲区中的数据写入输出设备。默认情况下，读cin会刷新cout；程序非正常终止时也会刷新cout。

2、Cerr：
一个ostream对象，关联到标准错误，通常写入到与标准输出相同的设备。默认情况下，写到cerr的数据是不缓冲的。cerr通常用输出错误信息或其他不属于程序正常逻辑的输出内容。

3、类(class)：一种用于定义自己的数据结构及其相关操作的机制。

4、clog：一个ostream对象，关联到标准错误。默认情况下，写到clog的数据是被缓冲的。clog通常用于报告程序的执行信息，存入一个日志文件中。

5、注释：被编译器忽略的程序文件。C++有两张类型的注释：单行注释和界定符对注释。

6、通常用值0表示假，用非零值表示真。

7、初始化：在一个对象创建的时候赋予它一个值。

8、函数：具名的计算单元。成员函数：类定义操作。方法：成员函数的同义术语。

9、命名空间：将库定义的名字放在一个单一位置的机制。命名空间可以避免不经意的名字冲突。

10、为初始化的变量：未赋予初值的变量。类类型的变量如果未指定初值，则按类定义指定的方式进行初始化。定义在函数内部的内置类型变量默认是不初始化的，除非有显式的初始化语句。试图使用一个未初始化变量的值是错误的。未初始化变量是bug的常见成因。






















